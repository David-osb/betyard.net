================================================================================================
🚀 RENDER.COM DEPLOYMENT - STEP BY STEP INSTRUCTIONS
================================================================================================

📍 YOU ARE HERE: Ready to deploy your Multi-Position ML Backend to the cloud!

What you're deploying: Flask API with 4 XGBoost models (QB, RB, WR, TE)
Time needed: 15 minutes total
Cost: $0.00 (free forever)

================================================================================================
STEP 1: CREATE RENDER ACCOUNT (2 minutes)
================================================================================================

1. Open your browser and go to: https://render.com

2. Click "Get Started for Free" (top right)

3. Choose "Sign up with GitHub" (recommended)
   ✅ This connects your repository automatically
   ✅ Enables auto-deploy on git push

4. Authorize Render to access your GitHub
   - Click "Authorize Render"
   - No credit card required!

✅ SUCCESS: You're logged into Render dashboard!

================================================================================================
STEP 2: CREATE NEW WEB SERVICE (3 minutes)
================================================================================================

1. On Render Dashboard, click the blue "New +" button (top right)

2. Select "Web Service" from dropdown

3. Connect Your Repository:
   - Click "Configure account" or "Connect GitHub"
   - Find and select: "David-osb/betyard.net"
   - Click "Connect"

✅ SUCCESS: Repository connected!

================================================================================================
STEP 3: CONFIGURE SERVICE (5 minutes)
================================================================================================

Fill in these EXACT settings:

┌─────────────────────────────────────────────────────────────┐
│ Basic Settings:                                              │
├─────────────────────────────────────────────────────────────┤
│ Name:             betyard-ml-backend                         │
│ Region:           Oregon (US West)                           │
│ Branch:           main                                       │
│ Root Directory:   ml-backend        ⚠️ IMPORTANT!          │
│ Runtime:          Python 3                                   │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ Build & Deploy Settings:                                     │
├─────────────────────────────────────────────────────────────┤
│ Build Command:    pip install -r requirements.txt           │
│ Start Command:    python app.py                              │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ Instance Type:                                               │
├─────────────────────────────────────────────────────────────┤
│ Plan:             Free                                       │
│                   (750 hours/month - perfect!)              │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ Advanced Settings (Optional):                                │
├─────────────────────────────────────────────────────────────┤
│ Click "Advanced" and add these environment variables:       │
│                                                              │
│ Key: PORT          Value: 5000                              │
│ Key: PYTHON_VERSION Value: 3.11.0                           │
│ Key: FLASK_ENV     Value: production                        │
└─────────────────────────────────────────────────────────────┘

⚠️ CRITICAL: Make sure "Root Directory" is set to "ml-backend"
   This tells Render where to find your app.py and requirements.txt

4. Scroll down and click "Create Web Service" (blue button)

✅ SUCCESS: Service is creating!

================================================================================================
STEP 4: WATCH DEPLOYMENT (5 minutes)
================================================================================================

You'll see a build log appearing in real-time. Expected output:

==> Cloning from https://github.com/David-osb/betyard.net...
==> Checking out commit 0376314 in branch main
==> Using Python version 3.11.0
==> Running build command 'pip install -r requirements.txt'...
    Collecting flask==3.0.3
    Collecting xgboost==2.0.3
    Collecting pandas==2.2.3
    ...
    Successfully installed flask-3.0.3 xgboost-2.0.3 ...
==> Build successful!

==> Starting service with 'python app.py'...
    🏈 NFL ML Prediction Backend Starting...
    📦 Loading models...
    ✅ QB Model loaded successfully
    ✅ RB Model loaded successfully
    ✅ WR Model loaded successfully
    ✅ TE Model loaded successfully
    🚀 All 4 models loaded!
    📡 Server running on port 5000
    * Running on all addresses (0.0.0.0)
    * Running on http://127.0.0.1:5000
    
==> Service is live! 🎉

✅ SUCCESS: Your ML backend is LIVE!

================================================================================================
STEP 5: GET YOUR URL (1 minute)
================================================================================================

At the top of the page, you'll see your service URL:

┌─────────────────────────────────────────────────────────────┐
│ 🌐 https://betyard-ml-backend.onrender.com                  │
│    [Copy URL button]                                        │
└─────────────────────────────────────────────────────────────┘

COPY THIS URL! You'll need it in the next step.

Test it immediately by clicking the URL or visiting:
https://YOUR-URL.onrender.com/health

Expected response:
{
  "status": "healthy",
  "models_loaded": {
    "QB": true,
    "RB": true,
    "WR": true,
    "TE": true
  }
}

✅ SUCCESS: ML backend is responding!

================================================================================================
STEP 6: UPDATE FRONTEND (2 minutes)
================================================================================================

1. Open: assets/js/ml-config.js

2. Find this section:
   const ML_CONFIG = {
       RENDER: 'https://betyard-ml-backend.onrender.com',  // ⬅️ OLD PLACEHOLDER
       LOCAL: 'http://localhost:5000',
       ACTIVE: 'LOCAL'  // ⬅️ CURRENTLY USING LOCAL
   };

3. Replace with YOUR actual URL:
   const ML_CONFIG = {
       RENDER: 'https://betyard-ml-backend.onrender.com',  // ⬅️ YOUR REAL URL
       LOCAL: 'http://localhost:5000',
       ACTIVE: 'RENDER'  // ⬅️ CHANGED TO RENDER
   };

4. Save the file

✅ SUCCESS: Frontend configured!

================================================================================================
STEP 7: TEST DEPLOYMENT (2 minutes)
================================================================================================

Open PowerShell and run:

.\ml-backend\Test-RenderDeployment.ps1 -RenderUrl "https://YOUR-URL.onrender.com"

Replace YOUR-URL with your actual Render URL!

Expected output:
🧪 Testing Render Deployment
================================================
Test 1: Health Check
✅ Health Check: Status=healthy
   Models Loaded:
      ✅ QB: True
      ✅ RB: True
      ✅ WR: True
      ✅ TE: True

Test 2: QB Prediction
✅ QB Prediction:
   Passing Yards: 287.5
   Passing TDs: 2.1
   Confidence: 94.3%

... (tests for RB, WR, TE)

✅ Deployment Test Complete!

✅ SUCCESS: All tests passing!

================================================================================================
STEP 8: COMMIT & DEPLOY (1 minute)
================================================================================================

In PowerShell:

git add assets/js/ml-config.js
git commit -m "feat: Connect frontend to Render ML backend"
git push origin main

This will:
1. ✅ Push updated ml-config.js to GitHub
2. ✅ Trigger cache buster update
3. ✅ Update live website

✅ SUCCESS: Changes deployed!

================================================================================================
STEP 9: VERIFY ON LIVE SITE (2 minutes)
================================================================================================

1. Go to: https://betyard.net

2. Open browser console (F12)

3. Look for these logs:
   🔍 Testing ML Backend Endpoints...
   🎯 Testing ACTIVE provider: RENDER
   ✅ RENDER: https://betyard-ml-backend.onrender.com - ONLINE

4. Select any game, position, and player

5. Click "Get Predictions"

6. Verify you see predictions with realistic stats:
   - QB: Passing yards, TDs
   - RB: Rushing yards, attempts, TDs
   - WR: Receiving yards, receptions, targets, TDs
   - TE: Receiving yards, receptions, targets, TDs

✅ SUCCESS: Live site working with cloud ML backend!

================================================================================================
🎉 DEPLOYMENT COMPLETE! 🎉
================================================================================================

What you accomplished:
✅ Deployed Flask ML backend to Render.com
✅ All 4 position models (QB/RB/WR/TE) live in cloud
✅ Frontend connected to cloud backend
✅ Auto-deploy enabled (every git push updates backend)
✅ HTTPS enabled automatically
✅ Zero monthly cost

Your ML backend URL:
https://betyard-ml-backend.onrender.com

Backend Endpoints:
- GET  /health     - Check service health
- POST /predict    - Get player predictions (all positions)
- GET  /model/info - Model details and features

================================================================================================
⚠️ IMPORTANT NOTES
================================================================================================

1. Cold Start Delay:
   - Free tier sleeps after 15 min inactivity
   - First request after sleep: 10-15 seconds
   - Subsequent requests: <500ms
   - Solution: Use uptimerobot.com (free) to ping /health every 5 min

2. Monitoring:
   - View logs: Render Dashboard → Logs tab
   - Check metrics: Render Dashboard → Metrics tab
   - Get alerts: Settings → Notifications

3. Upgrading:
   - Stay free for testing/low traffic
   - Upgrade to $7/month for 24/7 always-on if needed

================================================================================================
🆘 TROUBLESHOOTING
================================================================================================

Problem: Build fails
Solution: Check "Root Directory" is set to "ml-backend"

Problem: Service crashes on start
Solution: Check logs in Render dashboard, ensure all .pkl files committed

Problem: CORS errors in browser
Solution: Verify flask-cors installed and app has CORS(app)

Problem: Predictions take too long
Solution: First request after sleep is slow (10-15s), subsequent fast

Problem: Models not loading
Solution: Ensure all 4 .pkl files are in ml-backend folder and committed

================================================================================================
📚 MORE HELP
================================================================================================

Full Documentation:  ml-backend/DEPLOY_TO_RENDER.md
Quick Reference:     ml-backend/QUICK_START.md
Test Script:         ml-backend/Test-RenderDeployment.ps1

Render Docs:         https://render.com/docs
Render Community:    https://community.render.com

================================================================================================

🎯 Ready to Deploy? Start with STEP 1 above!

================================================================================================
